name: Update KubeVirt Chart

on:
  schedule:
    # TÃ¤glich um 2 Uhr morgens UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_version:
        description: 'Force specific version (e.g. v1.7.0)'
        required: false
        type: string

jobs:
  check-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          # yq for YAML manipulation
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

          # helm-docs
          curl -sSL https://github.com/norwoodj/helm-docs/releases/download/v1.14.2/helm-docs_1.14.2_Linux_x86_64.tar.gz | tar -xz
          sudo mv helm-docs /usr/local/bin/

      - name: Get versions
        id: versions
        run: |
          # Current version from Chart
          CURRENT=$(yq '.appVersion' charts/kubevirt/Chart.yaml | tr -d '"')
          echo "current=$CURRENT" >> $GITHUB_OUTPUT

          # Latest release from GitHub
          if [[ -n "${{ inputs.force_version }}" ]]; then
            LATEST="${{ inputs.force_version }}"
            echo "Using forced version: $LATEST"
          else
            LATEST=$(curl -s https://api.github.com/repos/kubevirt/kubevirt/releases/latest | jq -r .tag_name)
          fi
          echo "latest=$LATEST" >> $GITHUB_OUTPUT

          # Check if update needed
          if [[ "$CURRENT" != "$LATEST" ]]; then
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "New version available: $CURRENT -> $LATEST"
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "Already up to date: $CURRENT"
          fi

      - name: Update Chart files
        if: steps.versions.outputs.needs_update == 'true'
        run: |
          NEW_VERSION="${{ steps.versions.outputs.latest }}"
          NEW_VERSION_NO_V="${NEW_VERSION#v}"

          echo "Updating to $NEW_VERSION..."

          # 1. Chart.yaml
          yq -i '.version = "'$NEW_VERSION_NO_V'"' charts/kubevirt/Chart.yaml
          yq -i '.appVersion = "'$NEW_VERSION'"' charts/kubevirt/Chart.yaml

          # 2. values.yaml - Image Tag
          yq -i '.operator.image.tag = "'$NEW_VERSION'"' charts/kubevirt/values.yaml

          # 3. README.md.gotmpl - Version References
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/$NEW_VERSION/g" charts/kubevirt/README.md.gotmpl || true

      - name: Fetch Release Notes
        if: steps.versions.outputs.needs_update == 'true'
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.versions.outputs.latest }}"

          # Get release notes
          RELEASE_DATA=$(curl -s "https://api.github.com/repos/kubevirt/kubevirt/releases/tags/$NEW_VERSION")

          # Extract body and save
          echo "$RELEASE_DATA" | jq -r '.body' > /tmp/release-notes.md

          # Get release URL
          RELEASE_URL=$(echo "$RELEASE_DATA" | jq -r '.html_url')
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT

      - name: Create PR Body
        if: steps.versions.outputs.needs_update == 'true'
        run: |
          NEW_VERSION="${{ steps.versions.outputs.latest }}"
          OLD_VERSION="${{ steps.versions.outputs.current }}"
          RELEASE_URL="${{ steps.release_notes.outputs.release_url }}"

          cat > /tmp/pr-body.md << 'EOF'
## KubeVirt Update: $OLD_VERSION -> $NEW_VERSION

This PR was automatically created by the KubeVirt update workflow.

### Automated Changes

- [x] Updated Chart.yaml version to `$NEW_VERSION`
- [x] Updated Chart.yaml appVersion to `$NEW_VERSION`
- [x] Updated operator image tag to `$NEW_VERSION`
- [x] Updated version references in README
- [x] Regenerated documentation

### Manual Review Required

**BEFORE MERGING, you MUST complete these steps:**

#### 1. Review Release Notes
- [ ] Read [$NEW_VERSION Release Notes]($RELEASE_URL)
- [ ] Identify breaking changes
- [ ] Note new features
- [ ] Check deprecations

#### 2. Update Feature Gates
- [ ] Check if any Beta features became **GA** -> Remove from `featureGates` list
- [ ] Check for **new Alpha/Beta features** -> Add to comments in values.yaml
- [ ] Remove **deprecated features** from values.yaml

**How to check:**
```bash
# Search release notes for "feature gate" mentions
# Look for: "X is now GA", "new feature Y", "deprecated Z"
```

#### 3. Update Configuration
- [ ] Check for **renamed config options** (e.g. `bandwidthPerGiB` -> `bandwidthPerMigration`)
- [ ] Update default values if recommended in release notes
- [ ] Verify GPU passthrough settings still compatible

#### 4. Test Locally
```bash
# Lint
helm lint charts/kubevirt

# Template validation
helm template kubevirt charts/kubevirt --validate

# Dry-run
helm install kubevirt charts/kubevirt \\
  -f charts/kubevirt/ci/ci-values.yaml \\
  --dry-run --debug

# Install in test cluster (recommended)
helm install kubevirt charts/kubevirt \\
  -f charts/kubevirt/ci/ci-values.yaml \\
  --namespace kubevirt --create-namespace

# Run tests
helm test kubevirt -n kubevirt
```

#### 5. Update Documentation
- [ ] Update README.md.gotmpl with new features/changes
- [ ] Run `helm-docs --chart-search-root=charts`
- [ ] Commit documentation changes

#### 6. Verify Templates
- [ ] Check if new KubeVirt components were added (DaemonSets, Services, etc.)
- [ ] Download and compare official manifests if unsure:
  ```bash
  curl -sL https://github.com/kubevirt/kubevirt/releases/download/$NEW_VERSION/kubevirt-operator.yaml > /tmp/operator.yaml
  # Compare with templates/operator/
  ```

### Release Information

<details>
<summary>Click to expand KubeVirt $NEW_VERSION release notes</summary>

EOF

          # Insert variables
          sed -i "s/\$NEW_VERSION/$NEW_VERSION/g" /tmp/pr-body.md
          sed -i "s/\$OLD_VERSION/$OLD_VERSION/g" /tmp/pr-body.md
          sed -i "s|\$RELEASE_URL|$RELEASE_URL|g" /tmp/pr-body.md

          # Append release notes
          cat /tmp/release-notes.md >> /tmp/pr-body.md

          # Close details
          cat >> /tmp/pr-body.md << 'EOF'

</details>

### Useful Links

- **Release:** $RELEASE_URL
- **Operator Manifest:** https://github.com/kubevirt/kubevirt/releases/download/$NEW_VERSION/kubevirt-operator.yaml
- **CR Example:** https://github.com/kubevirt/kubevirt/releases/download/$NEW_VERSION/kubevirt-cr.yaml
- **Changelog:** https://github.com/kubevirt/kubevirt/blob/main/CHANGELOG.md

---

**WARNING: DO NOT merge without completing the manual checklist above!**

The most critical step is updating Feature Gates - GA features MUST be removed from the featureGates list.
EOF

          # Final variable replacement
          sed -i "s/\$NEW_VERSION/$NEW_VERSION/g" /tmp/pr-body.md
          sed -i "s|\$RELEASE_URL|$RELEASE_URL|g" /tmp/pr-body.md

      - name: Generate documentation
        if: steps.versions.outputs.needs_update == 'true'
        run: |
          helm-docs --chart-search-root=charts

      - name: Create Pull Request
        if: steps.versions.outputs.needs_update == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat(kubevirt): update to ${{ steps.versions.outputs.latest }}"
          branch: automated/kubevirt-${{ steps.versions.outputs.latest }}
          delete-branch: true
          title: "feat(kubevirt): update to ${{ steps.versions.outputs.latest }}"
          body-path: /tmp/pr-body.md
          labels: |
            automated
            kubevirt
            dependencies
            needs-review
          draft: false

      - name: Summary
        if: steps.versions.outputs.needs_update == 'true'
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ### KubeVirt Update PR Created

          **Version:** ${{ steps.versions.outputs.current }} -> ${{ steps.versions.outputs.latest }}

          **Next Steps:**
          1. Review the created PR
          2. Complete the manual checklist (especially Feature Gates!)
          3. Test locally
          4. Merge when ready

          **Important:** Don't forget to update Feature Gates in values.yaml!
          EOF

      - name: No update needed
        if: steps.versions.outputs.needs_update == 'false'
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ### KubeVirt Chart is up to date

          **Current Version:** ${{ steps.versions.outputs.current }}

          No update needed.
          EOF
